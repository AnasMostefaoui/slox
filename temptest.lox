fun repeat(times, fn) {
    for (var i = 0; i < times; i = i + 1) {
        fn();
    }
}

var i = 0;
repeat(10, fun () {
    i = i + 1;
});
print(i);

// fun sayHi(first, last) {
//   print "Hi, " + first + " " + last + "!";
//   return nil;
// }

// var name = "Alex";
// print sayHi("Dear", name);

// fun thrice(fn) {
//   for (var i = 1; i <= 3; i = i + 1) {
//     fn(i);
//   }
// }

// var out = "Out";
// thrice(fun (a) {
//     print out;
//   print a;
// });

// fun scope(a) {
//   var a = "local";
//   print(a);
// }

// scope(3);

// fun makePoint(x, y) {
//   fun closure(method) {
//     if (method == "x") return x;
//     if (method == "y") return y;
//     print "unknown method " + method;
//   }

//   return closure;
// }

// var point = makePoint(2, 3 * 3);
// print point("x"); // "2".
// print point("y"); // "3".

// fun makeCounter() {
//   var i = 0;
//   fun count() {
//     i = i + 1;
//     print i;
//   }

//   return count;
// }

// var counter = makeCounter();
// counter(); // "1".
// counter(); // "2".

// fun fibonacci(n) {
//   if (n <= 1) return n;
//   return fibonacci(n - 2) + fibonacci(n - 1);
// }


// for (var i = 0; i < 20; i = i + 1) {
//     var before = clock();
//     fibonacci(i);
//     var takes = clock() - before;
//     print i;
//     print takes;
// //   print fibonacci(i);
// }



// var i = 0;
// while (i < 10) {
//     i = i + 1;
//     print(i);
//     var in = 0;
//     while (true) {
//         in = in + 1;
//         print(i);
//         if (in > 5) {
//             break;
//         }
//         print("after");
//     }
//     if (i == 5) {
//         break;
//     }
// }